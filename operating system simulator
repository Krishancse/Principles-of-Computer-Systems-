Creating a complete operating system simulator in Java is a complex task that requires a significant amount of code and time. Below, I'll provide a simplified example of a basic operating system simulator that simulates process scheduling. This code will demonstrate some core concepts, but keep in mind that a real-world OS simulator would be much more extensive and sophisticated.

```java
import java.util.LinkedList;
import java.util.Queue;

class Process {
    private String name;
    private int burstTime;

    public Process(String name, int burstTime) {
        this.name = name;
        this.burstTime = burstTime;
    }

    public String getName() {
        return name;
    }

    public int getBurstTime() {
        return burstTime;
    }

    public void execute(int timeQuantum) {
        if (burstTime > timeQuantum) {
            System.out.println("Executing process " + name + " for time quantum " + timeQuantum);
            burstTime -= timeQuantum;
        } else {
            System.out.println("Executing process " + name + " for time quantum " + burstTime);
            burstTime = 0;
        }
    }

    public boolean isFinished() {
        return burstTime == 0;
    }
}

public class OperatingSystemSimulator {
    public static void main(String[] args) {
        Queue<Process> readyQueue = new LinkedList<>();
        readyQueue.add(new Process("P1", 10));
        readyQueue.add(new Process("P2", 5));
        readyQueue.add(new Process("P3", 8));

        int timeQuantum = 5;

        while (!readyQueue.isEmpty()) {
            Process currentProcess = readyQueue.poll();
            currentProcess.execute(timeQuantum);

            if (!currentProcess.isFinished()) {
                readyQueue.add(currentProcess);
            } else {
                System.out.println("Process " + currentProcess.getName() + " has finished execution.");
            }
        }

        System.out.println("All processes have finished execution.");
    }
}
```

This simplified example demonstrates a round-robin scheduling algorithm where processes are executed in a circular queue, and each process is given a fixed time quantum to execute. The `Process` class represents a basic process with a name and burst time.

Please note that this is just a minimal example to give you an idea of how you can structure an OS simulator in Java. In a real-world OS simulator, you would need to implement many additional features such as memory management, file systems, and more advanced scheduling algorithms. Such a project would likely span multiple classes and involve a more complex codebase.
