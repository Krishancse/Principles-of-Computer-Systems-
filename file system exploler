
import java.io.*;
import java.util.*;
import javax.swing.*;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

public class FileSystemExplorer {
    private JFrame frame;
    private JTree directoryTree;
    private DefaultTreeModel treeModel;
    private DefaultMutableTreeNode root;

    public FileSystemExplorer() {
        frame = new JFrame("File System Explorer");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        root = new DefaultMutableTreeNode(new File("C:/")); // Root directory
        treeModel = new DefaultTreeModel(root);
        directoryTree = new JTree(treeModel);

        JScrollPane treeScrollPane = new JScrollPane(directoryTree);
        frame.add(treeScrollPane);

        initializeUI();
    }

    private void initializeUI() {
        // Create buttons for various operations
        JButton createFileButton = new JButton("Create File");
        createFileButton.addActionListener(e -> createFile());

        JButton createDirectoryButton = new JButton("Create Directory");
        createDirectoryButton.addActionListener(e -> createDirectory());

        JButton deleteButton = new JButton("Delete");
        deleteButton.addActionListener(e -> delete());

        JButton renameButton = new JButton("Rename");
        renameButton.addActionListener(e -> rename());

        JButton refreshButton = new JButton("Refresh");
        refreshButton.addActionListener(e -> refresh());

        // Create a panel to hold the buttons
        JPanel buttonPanel = new JPanel();
        buttonPanel.add(createFileButton);
        buttonPanel.add(createDirectoryButton);
        buttonPanel.add(deleteButton);
        buttonPanel.add(renameButton);
        buttonPanel.add(refreshButton);

        // Add the button panel to the frame
        frame.add(buttonPanel, "South");

        // Set frame size and visibility
        frame.setSize(800, 600);
        frame.setVisible(true);
    }

        // Implement logic to create a new file (e.g., using JFileChooser)
        // You may need to display a dialog to choose the file name and location
private void createFile() {
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Create a New File");

    // Set file filter (optional)
    FileNameExtensionFilter filter = new FileNameExtensionFilter("Text Files (*.txt)", "txt");
    fileChooser.setFileFilter(filter);

    int userChoice = fileChooser.showSaveDialog(frame);

    if (userChoice == JFileChooser.APPROVE_OPTION) {
        File selectedFile = fileChooser.getSelectedFile();

        if (selectedFile.exists()) {
            JOptionPane.showMessageDialog(frame, "File already exists.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                boolean created = selectedFile.createNewFile();

                if (created) {
                    JOptionPane.showMessageDialog(frame, "File created successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                    
                    // You can update the directory view to include the newly created file
                    // For example, if you have a JTree representing the file structure, update the tree model.
                    DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(selectedFile.getName());
                    root.add(newNode);
                    treeModel.reload(root);

                } else {
                    JOptionPane.showMessageDialog(frame, "Failed to create file.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(frame, "An error occurred while creating the file.", "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }
}

    

        // Implement logic to create a new directory (e.g., using JFileChooser)
        // You may need to display a dialog to choose the directory name and location
    private void createDirectory() {
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Create a New Directory");
    fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

    int userChoice = fileChooser.showSaveDialog(frame);

    if (userChoice == JFileChooser.APPROVE_OPTION) {
        File selectedDirectory = fileChooser.getSelectedFile();

        if (selectedDirectory.exists()) {
            JOptionPane.showMessageDialog(frame, "Directory already exists.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            boolean created = selectedDirectory.mkdir();

            if (created) {
                JOptionPane.showMessageDialog(frame, "Directory created successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                
                // You can update the directory view to include the newly created directory
                // For example, if you have a JTree representing the file structure, update the tree model.
                DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(selectedDirectory.getName());
                root.add(newNode);
                treeModel.reload(root);

            } else {
                JOptionPane.showMessageDialog(frame, "Failed to create directory.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
}


        // Implement logic to delete selected file or directory
    private void delete() {
    TreePath[] selectedPaths = directoryTree.getSelectionPaths();

    if (selectedPaths != null) {
        for (TreePath path : selectedPaths) {
            DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) path.getLastPathComponent();
            Object selectedObject = selectedNode.getUserObject();

            if (selectedObject instanceof File) {
                File selectedFile = (File) selectedObject;

                int choice = JOptionPane.showConfirmDialog(frame, "Are you sure you want to delete this file?", "Confirm Delete", JOptionPane.YES_NO_OPTION);

                if (choice == JOptionPane.YES_OPTION) {
                    boolean deleted = selectedFile.delete();

                    if (deleted) {
                        DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) selectedNode.getParent();
                        treeModel.removeNodeFromParent(selectedNode);
                        treeModel.reload(parentNode);

                        JOptionPane.showMessageDialog(frame, "File deleted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(frame, "Failed to delete file.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } else if (selectedObject instanceof File) {
                File selectedDirectory = (File) selectedObject;

                int choice = JOptionPane.showConfirmDialog(frame, "Are you sure you want to delete this directory and its contents?", "Confirm Delete", JOptionPane.YES_NO_OPTION);

                if (choice == JOptionPane.YES_OPTION) {
                    boolean deleted = deleteDirectory(selectedDirectory);

                    if (deleted) {
                        DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) selectedNode.getParent();
                        treeModel.removeNodeFromParent(selectedNode);
                        treeModel.reload(parentNode);

                        JOptionPane.showMessageDialog(frame, "Directory deleted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(frame, "Failed to delete directory.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }
    }
}

private boolean deleteDirectory(File directory) {
    if (directory.isDirectory()) {
        File[] files = directory.listFiles();
        if (files != null) {
            for (File file : files) {
                boolean success = deleteDirectory(file);
                if (!success) {
                    return false;
                }
            }
        }
    }

    return directory.delete();
}


        // Implement logic to rename selected file or directory
    private void rename() {
    TreePath[] selectedPaths = directoryTree.getSelectionPaths();

    if (selectedPaths != null && selectedPaths.length == 1) {
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) selectedPaths[0].getLastPathComponent();
        Object selectedObject = selectedNode.getUserObject();

        if (selectedObject instanceof File) {
            File selectedFile = (File) selectedObject;
            String currentName = selectedFile.getName();

            String newName = JOptionPane.showInputDialog(frame, "Enter a new name:", currentName);

            if (newName != null && !newName.isEmpty()) {
                File newFile = new File(selectedFile.getParentFile(), newName);

                if (selectedFile.renameTo(newFile)) {
                    selectedNode.setUserObject(newFile);
                    treeModel.nodeChanged(selectedNode);

                    JOptionPane.showMessageDialog(frame, "File renamed successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(frame, "Failed to rename file.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else if (selectedObject instanceof File) {
            File selectedDirectory = (File) selectedObject;
            String currentName = selectedDirectory.getName();

            String newName = JOptionPane.showInputDialog(frame, "Enter a new name:", currentName);

            if (newName != null && !newName.isEmpty()) {
                File newDirectory = new File(selectedDirectory.getParentFile(), newName);

                if (selectedDirectory.renameTo(newDirectory)) {
                    selectedNode.setUserObject(newDirectory);
                    treeModel.nodeChanged(selectedNode);

                    JOptionPane.showMessageDialog(frame, "Directory renamed successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(frame, "Failed to rename directory.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }
}


        // Implement logic to refresh the directory view
    private void refresh() {
    DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) directoryTree.getLastSelectedPathComponent();

    if (selectedNode != null) {
        Object selectedObject = selectedNode.getUserObject();

        if (selectedObject instanceof File) {
            File selectedFile = (File) selectedObject;

            if (selectedFile.isDirectory()) {
                // Clear the child nodes and reload
                selectedNode.removeAllChildren();
                treeModel.reload(selectedNode);

                // Re-populate the child nodes with the contents of the directory
                File[] files = selectedFile.listFiles();

                if (files != null) {
                    for (File file : files) {
                        DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(file);
                        selectedNode.add(newNode);
                    }

                    treeModel.reload(selectedNode);
                }
            }
        }
    }
}


    public static void main(String[] args) {
        SwingUtilities.invokeLater() -> {
            new FileSystemExplorer();
        }
    }
} //here is the complete 
